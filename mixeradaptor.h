/*
 * This file was generated by dbusidl2cpp version 0.5
 * when processing input file org.kde.KMix.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#ifndef MIXERADAPTOR_H_99191149582401
#define MIXERADAPTOR_H_99191149582401

#include <QtCore/QObject>
#include <dbus/qdbus.h>
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.kde.KMix
 */
class KMixAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kde.KMix")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kde.KMix\" >\n"
"    <method name=\"setVolume\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"in\" type=\"i\" name=\"percentage\" />\n"
"    </method>\n"
"    <method name=\"setMasterVolume\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"percentage\" />\n"
"    </method>\n"
"    <method name=\"increaseVolume\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"    </method>\n"
"    <method name=\"decreaseVolume\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"    </method>\n"
"    <method name=\"volume\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"out\" type=\"i\" />\n"
"    </method>\n"
"    <method name=\"masterVolume\" >\n"
"      <arg direction=\"out\" type=\"i\" />\n"
"    </method>\n"
"    <method name=\"setAbsoluteVolume\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"in\" type=\"x\" name=\"absoluteVolume\" />\n"
"    </method>\n"
"    <method name=\"absoluteVolume\" >\n"
"      <arg direction=\"out\" type=\"x\" />\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"    </method>\n"
"    <method name=\"absoluteVolumeMin\" >\n"
"      <arg direction=\"out\" type=\"x\" />\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"    </method>\n"
"    <method name=\"absoluteVolumeMax\" >\n"
"      <arg direction=\"out\" type=\"x\" />\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"    </method>\n"
"    <method name=\"setMute\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"in\" type=\"b\" name=\"on\" />\n"
"    </method>\n"
"    <method name=\"toggleMute\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"    </method>\n"
"    <method name=\"mute\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"    <method name=\"setRecordSource\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"in\" type=\"b\" name=\"on\" />\n"
"    </method>\n"
"    <method name=\"isRecordSource\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"    <method name=\"setBalance\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"    </method>\n"
"    <method name=\"isAvailableDevice\" >\n"
"      <arg direction=\"in\" type=\"i\" name=\"deviceidx\" />\n"
"      <arg direction=\"out\" type=\"b\" />\n"
"    </method>\n"
"    <method name=\"mixerName\" >\n"
"      <arg direction=\"out\" type=\"s\" />\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    KMixAdaptor(QObject *parent);
    virtual ~KMixAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    qlonglong absoluteVolume(int deviceidx);
    qlonglong absoluteVolumeMax(int deviceidx);
    qlonglong absoluteVolumeMin(int deviceidx);
    void decreaseVolume(int deviceidx);
    void increaseVolume(int deviceidx);
    bool isAvailableDevice(int deviceidx);
    bool isRecordSource(int deviceidx);
    int masterVolume();
    QString mixerName();
    bool mute(int deviceidx);
    void setAbsoluteVolume(int deviceidx, qlonglong absoluteVolume);
    void setBalance(int deviceidx);
    void setMasterVolume(int percentage);
    void setMute(int deviceidx, bool on);
    void setRecordSource(int deviceidx, bool on);
    void setVolume(int deviceidx, int percentage);
    void toggleMute(int deviceidx);
    int volume(int deviceidx);
Q_SIGNALS: // SIGNALS
};

#endif
