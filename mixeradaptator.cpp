/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.kmix.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "mixeradaptator.h"
#include "mixeradaptator.moc"

KmixAdaptor::KmixAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KmixAdaptor::~KmixAdaptor()
{
    // destructor
}

void KmixAdaptor::absoluteVolume(int deviceidx)
{
    // handle method call org.kde.kmix.absoluteVolume
    QMetaObject::invokeMethod(parent(), "absoluteVolume", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->absoluteVolume(deviceidx);
}

void KmixAdaptor::absoluteVolumeMax(int deviceidx)
{
    // handle method call org.kde.kmix.absoluteVolumeMax
    QMetaObject::invokeMethod(parent(), "absoluteVolumeMax", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->absoluteVolumeMax(deviceidx);
}

void KmixAdaptor::absoluteVolumeMin(int deviceidx)
{
    // handle method call org.kde.kmix.absoluteVolumeMin
    QMetaObject::invokeMethod(parent(), "absoluteVolumeMin", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->absoluteVolumeMin(deviceidx);
}

void KmixAdaptor::decreaseVolume(int deviceidx)
{
    // handle method call org.kde.kmix.decreaseVolume
    QMetaObject::invokeMethod(parent(), "decreaseVolume", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->decreaseVolume(deviceidx);
}

void KmixAdaptor::increaseVolume(int deviceidx)
{
    // handle method call org.kde.kmix.increaseVolume
    QMetaObject::invokeMethod(parent(), "increaseVolume", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->increaseVolume(deviceidx);
}

bool KmixAdaptor::isAvailableDevice(int deviceidx)
{
    // handle method call org.kde.kmix.isAvailableDevice
    bool out0;
    QMetaObject::invokeMethod(parent(), "isAvailableDevice", Q_RETURN_ARG(bool, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->isAvailableDevice(deviceidx);
    return out0;
}

bool KmixAdaptor::isRecordSource(int deviceidx)
{
    // handle method call org.kde.kmix.isRecordSource
    bool out0;
    QMetaObject::invokeMethod(parent(), "isRecordSource", Q_RETURN_ARG(bool, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->isRecordSource(deviceidx);
    return out0;
}

int KmixAdaptor::masterVolume()
{
    // handle method call org.kde.kmix.masterVolume
    int out0;
    QMetaObject::invokeMethod(parent(), "masterVolume", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->masterVolume();
    return out0;
}

QString KmixAdaptor::mixerName()
{
    // handle method call org.kde.kmix.mixerName
    QString out0;
    QMetaObject::invokeMethod(parent(), "mixerName", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->mixerName();
    return out0;
}

bool KmixAdaptor::mute(int deviceidx)
{
    // handle method call org.kde.kmix.mute
    bool out0;
    QMetaObject::invokeMethod(parent(), "mute", Q_RETURN_ARG(bool, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->mute(deviceidx);
    return out0;
}

void KmixAdaptor::setAbsoluteVolume(int deviceidx)
{
    // handle method call org.kde.kmix.setAbsoluteVolume
    QMetaObject::invokeMethod(parent(), "setAbsoluteVolume", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setAbsoluteVolume(deviceidx);
}

void KmixAdaptor::setBalance(int deviceidx)
{
    // handle method call org.kde.kmix.setBalance
    QMetaObject::invokeMethod(parent(), "setBalance", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setBalance(deviceidx);
}

void KmixAdaptor::setMasterVolume(int percentage)
{
    // handle method call org.kde.kmix.setMasterVolume
    QMetaObject::invokeMethod(parent(), "setMasterVolume", Q_ARG(int, percentage));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setMasterVolume(percentage);
}

void KmixAdaptor::setMute(int deviceidx, bool on)
{
    // handle method call org.kde.kmix.setMute
    QMetaObject::invokeMethod(parent(), "setMute", Q_ARG(int, deviceidx), Q_ARG(bool, on));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setMute(deviceidx, on);
}

void KmixAdaptor::setRecordSource(int deviceidx, bool on)
{
    // handle method call org.kde.kmix.setRecordSource
    QMetaObject::invokeMethod(parent(), "setRecordSource", Q_ARG(int, deviceidx), Q_ARG(bool, on));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setRecordSource(deviceidx, on);
}

void KmixAdaptor::setVolume(int deviceidx, int percentage)
{
    // handle method call org.kde.kmix.setVolume
    QMetaObject::invokeMethod(parent(), "setVolume", Q_ARG(int, deviceidx), Q_ARG(int, percentage));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setVolume(deviceidx, percentage);
}

void KmixAdaptor::toggleMute(int deviceidx)
{
    // handle method call org.kde.kmix.toggleMute
    QMetaObject::invokeMethod(parent(), "toggleMute", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->toggleMute(deviceidx);
}

int KmixAdaptor::volume(int deviceidx)
{
    // handle method call org.kde.kmix.volume
    int out0;
    QMetaObject::invokeMethod(parent(), "volume", Q_RETURN_ARG(int, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->volume(deviceidx);
    return out0;
}

