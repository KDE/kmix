/*
 * This file was generated by dbusidl2cpp version 0.5
 * when processing input file org.kde.KMix.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "mixeradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KMixAdaptor
 */

KMixAdaptor::KMixAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KMixAdaptor::~KMixAdaptor()
{
    // destructor
}

qlonglong KMixAdaptor::absoluteVolume(int deviceidx)
{
    // handle method call org.kde.KMix.absoluteVolume
    qlonglong out0;
    QMetaObject::invokeMethod(parent(), "absoluteVolume", Q_RETURN_ARG(qlonglong, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->absoluteVolume(deviceidx);
    return out0;
}

qlonglong KMixAdaptor::absoluteVolumeMax(int deviceidx)
{
    // handle method call org.kde.KMix.absoluteVolumeMax
    qlonglong out0;
    QMetaObject::invokeMethod(parent(), "absoluteVolumeMax", Q_RETURN_ARG(qlonglong, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->absoluteVolumeMax(deviceidx);
    return out0;
}

qlonglong KMixAdaptor::absoluteVolumeMin(int deviceidx)
{
    // handle method call org.kde.KMix.absoluteVolumeMin
    qlonglong out0;
    QMetaObject::invokeMethod(parent(), "absoluteVolumeMin", Q_RETURN_ARG(qlonglong, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->absoluteVolumeMin(deviceidx);
    return out0;
}

void KMixAdaptor::decreaseVolume(int deviceidx)
{
    // handle method call org.kde.KMix.decreaseVolume
    QMetaObject::invokeMethod(parent(), "decreaseVolume", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->decreaseVolume(deviceidx);
}

void KMixAdaptor::increaseVolume(int deviceidx)
{
    // handle method call org.kde.KMix.increaseVolume
    QMetaObject::invokeMethod(parent(), "increaseVolume", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->increaseVolume(deviceidx);
}

bool KMixAdaptor::isAvailableDevice(int deviceidx)
{
    // handle method call org.kde.KMix.isAvailableDevice
    bool out0;
    QMetaObject::invokeMethod(parent(), "isAvailableDevice", Q_RETURN_ARG(bool, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->isAvailableDevice(deviceidx);
    return out0;
}

bool KMixAdaptor::isRecordSource(int deviceidx)
{
    // handle method call org.kde.KMix.isRecordSource
    bool out0;
    QMetaObject::invokeMethod(parent(), "isRecordSource", Q_RETURN_ARG(bool, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->isRecordSource(deviceidx);
    return out0;
}

int KMixAdaptor::masterVolume()
{
    // handle method call org.kde.KMix.masterVolume
    int out0;
    QMetaObject::invokeMethod(parent(), "masterVolume", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->masterVolume();
    return out0;
}

QString KMixAdaptor::mixerName()
{
    // handle method call org.kde.KMix.mixerName
    QString out0;
    QMetaObject::invokeMethod(parent(), "mixerName", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->mixerName();
    return out0;
}

bool KMixAdaptor::mute(int deviceidx)
{
    // handle method call org.kde.KMix.mute
    bool out0;
    QMetaObject::invokeMethod(parent(), "mute", Q_RETURN_ARG(bool, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->mute(deviceidx);
    return out0;
}

void KMixAdaptor::setAbsoluteVolume(int deviceidx, qlonglong absoluteVolume)
{
    // handle method call org.kde.KMix.setAbsoluteVolume
    QMetaObject::invokeMethod(parent(), "setAbsoluteVolume", Q_ARG(int, deviceidx), Q_ARG(qlonglong, absoluteVolume));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setAbsoluteVolume(deviceidx, absoluteVolume);
}

void KMixAdaptor::setBalance(int deviceidx)
{
    // handle method call org.kde.KMix.setBalance
    QMetaObject::invokeMethod(parent(), "setBalance", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setBalance(deviceidx);
}

void KMixAdaptor::setMasterVolume(int percentage)
{
    // handle method call org.kde.KMix.setMasterVolume
    QMetaObject::invokeMethod(parent(), "setMasterVolume", Q_ARG(int, percentage));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setMasterVolume(percentage);
}

void KMixAdaptor::setMute(int deviceidx, bool on)
{
    // handle method call org.kde.KMix.setMute
    QMetaObject::invokeMethod(parent(), "setMute", Q_ARG(int, deviceidx), Q_ARG(bool, on));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setMute(deviceidx, on);
}

void KMixAdaptor::setRecordSource(int deviceidx, bool on)
{
    // handle method call org.kde.KMix.setRecordSource
    QMetaObject::invokeMethod(parent(), "setRecordSource", Q_ARG(int, deviceidx), Q_ARG(bool, on));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setRecordSource(deviceidx, on);
}

void KMixAdaptor::setVolume(int deviceidx, int percentage)
{
    // handle method call org.kde.KMix.setVolume
    QMetaObject::invokeMethod(parent(), "setVolume", Q_ARG(int, deviceidx), Q_ARG(int, percentage));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setVolume(deviceidx, percentage);
}

void KMixAdaptor::toggleMute(int deviceidx)
{
    // handle method call org.kde.KMix.toggleMute
    QMetaObject::invokeMethod(parent(), "toggleMute", Q_ARG(int, deviceidx));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->toggleMute(deviceidx);
}

int KMixAdaptor::volume(int deviceidx)
{
    // handle method call org.kde.KMix.volume
    int out0;
    QMetaObject::invokeMethod(parent(), "volume", Q_RETURN_ARG(int, out0), Q_ARG(int, deviceidx));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->volume(deviceidx);
    return out0;
}


#include "mixeradaptor.moc"
